// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Item, List, itemView, toDoListView, toDo_view, _ref, _ref1, _ref2, _ref3;
    Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = function() {
        return {
          task: 'Default Task.',
          part2: 'Go do it!',
          done: false,
          order: toDoListView.nextOrder,
          count: 0
        };
      };

      Item.prototype.toggle = function() {
        return this.save({
          done: !this.get('done')
        });
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.model = Item;

      List.prototype.done = function() {
        return this.where({
          done: true
        });
      };

      List.prototype.remaining = function() {
        return this.where({
          done: false
        });
      };

      List.prototype.nextOrder = function() {
        if (!this.length) {
          1;
          return this.last().get('order' + 1);
        }
      };

      List.prototype.comparator = 'order';

      return List;

    })(Backbone.Collection);
    itemView = (function(_super) {
      __extends(itemView, _super);

      function itemView() {
        this.updateOnEnter = __bind(this.updateOnEnter, this);
        this.close = __bind(this.close, this);
        this.edit = __bind(this.edit, this);
        this.unrender = __bind(this.unrender, this);
        _ref2 = itemView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      itemView.prototype.tagName = 'div';

      itemView.prototype.className = 'row itemView';

      itemView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'unrender', 'cross', 'remove', 'edit', 'updateOnEnter', 'close');
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      itemView.prototype.render = function() {
        $(this.el).html("<div class=\"small-6 columns\"><input class=\"edit\" type=\"text\" value = \"" + (this.model.get('task')) + "\"/></div>\n<div id=\"info\" class=\"small-6 columns\">" + (this.model.get('task')) + " " + (this.model.get('part2')) + "</div>\n<div class=\"small-4 columns small-offset-2\">\n	<span class=\"cross button tiny secondary\">done</span>\n	<span class=\"delete button tiny alert\">delete</span>\n</div>	");
        this.$('#info').toggleClass('done', this.model.get('done'));
        this.input = this.$.edit;
        return this;
      };

      itemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      itemView.prototype.edit = function() {
        this.$el.toggleClass('editing');
        return this.$('input').focus();
      };

      itemView.prototype.close = function() {
        var value;
        value = this.input.val();
        if (!value) {
          return this.remove;
        } else {
          this.model.save({
            task: value
          });
          return this.$el.toggleClass('editing');
        }
      };

      itemView.prototype.updateOnEnter = function(e) {
        if (e.keyCode === 13) {
          return this.close;
        }
      };

      itemView.prototype.cross = function() {
        return this.model.toggle();
      };

      itemView.prototype.remove = function() {
        return this.model.destroy();
      };

      itemView.prototype.events = {
        'click .cross': 'cross',
        'click .delete': 'remove',
        'dblclick #info': 'edit',
        'keypress .edit': 'updateOnEnter',
        'blur .edit': 'updateOnEnter'
      };

      return itemView;

    })(Backbone.View);
    toDoListView = (function(_super) {
      __extends(toDoListView, _super);

      function toDoListView() {
        _ref3 = toDoListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      toDoListView.prototype.el = $('#theplace');

      toDoListView.prototype.initialize = function() {
        var _this = this;
        _.bindAll(this, 'render', 'addItem', 'appendItem');
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        $('#submitter').click(function() {
          _this.theTask = document.getElementById('taskInput').value;
          $('#taskInput').val('');
          $('#mod').foundation('reveal', 'close');
          return _this.addItem();
        });
        this.counter = 0;
        return this.render();
      };

      toDoListView.prototype.render = function() {
        return $(this.el).append("<a href=\"#\" class=\"button newTask\" data-reveal-id=\"mod\">New Task</a>\n	<div class=\"row\">\n		<div class=\"small-6 columns\"><h2>Task Name</h2></div>\n		<div class=\"small-4 small-offset-2 columns\"><h2>Task Actions</h2></div>\n		<hr /></div>\n\n<ul></ul>");
      };

      toDoListView.prototype.addItem = function() {
        var item;
        this.counter++;
        item = new Item;
        if (this.theTask) {
          item.set({
            task: "" + this.theTask + "!"
          });
        }
        item.set({
          part2: "" + (item.get('part2')) + " (" + this.counter + ")",
          count: this.counter
        });
        return this.collection.add(item);
      };

      toDoListView.prototype.appendItem = function(item) {
        var item_view;
        item_view = new itemView({
          model: item
        });
        return $('ul').append(item_view.render().el);
      };

      return toDoListView;

    })(Backbone.View);
    Backbone.sync = function(method, model, success, error) {
      return success();
    };
    return toDo_view = new toDoListView;
  });

}).call(this);
