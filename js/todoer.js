// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Item, List, itemView, toDoListView, toDo_view, _ref, _ref1, _ref2, _ref3;
    Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = function() {
        return {
          part1: 'Default Task',
          part2: 'Go do it!',
          count: 0
        };
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    itemView = (function(_super) {
      __extends(itemView, _super);

      function itemView() {
        this.unrender = __bind(this.unrender, this);
        _ref2 = itemView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      itemView.prototype.tagName = 'li';

      itemView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'unrender', 'swap', 'cross', 'remove');
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      itemView.prototype.render = function() {
        $(this.el).html("<span id=\"" + (this.model.get('count')) + "\">" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "</span>\n<span class=\"swap button tiny secondary\">done</span>\n<span class=\"delete button tiny alert\">delete</span>");
        return this;
      };

      itemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      itemView.prototype.swap = function() {
        return this.model.set({
          part1: this.model.get('part2'),
          part2: this.model.get('part1')
        });
      };

      itemView.prototype.cross = function() {
        return $(this.el).css('text-decoration', 'line-through');
      };

      itemView.prototype.remove = function() {
        return this.model.destroy();
      };

      itemView.prototype.events = {
        'click .swap': 'cross',
        'click .delete': 'remove'
      };

      return itemView;

    })(Backbone.View);
    toDoListView = (function(_super) {
      __extends(toDoListView, _super);

      function toDoListView() {
        _ref3 = toDoListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      toDoListView.prototype.el = $('#theplace');

      toDoListView.prototype.initialize = function() {
        var _this = this;
        _.bindAll(this, 'render', 'addItem', 'appendItem');
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        $('#submitter').click(function() {
          _this.theStuff = document.getElementById('taskInput').value;
          $('#taskInput').val('');
          $('#mod').foundation('reveal', 'close');
          return _this.addItem();
        });
        this.counter = 0;
        return this.render();
      };

      toDoListView.prototype.render = function() {
        return $(this.el).append("<a href=\"#\" class=\"button newTask\" data-reveal-id=\"mod\">New Task</a>\n<ul></ul>");
      };

      toDoListView.prototype.addItem = function() {
        var item;
        this.counter++;
        item = new Item;
        item.set({
          part1: "" + this.theStuff + "!",
          part2: "" + (item.get('part2')) + " (" + this.counter + ")",
          count: this.counter
        });
        return this.collection.add(item);
      };

      toDoListView.prototype.appendItem = function(item) {
        var item_view;
        item_view = new itemView({
          model: item
        });
        return $('ul').append(item_view.render().el);
      };

      return toDoListView;

    })(Backbone.View);
    Backbone.sync = function(method, model, success, error) {
      return success();
    };
    return toDo_view = new toDoListView;
  });

}).call(this);
